services:
  postgres:
    image: postgres:15
    container_name: hotel_postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DATABASE_USER:-nestuser}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-nestpass}
      POSTGRES_DB: ${DATABASE_NAME:-hotel_booking_dev}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DATABASE_USER:-nestuser} -d ${DATABASE_NAME:-hotel_booking_dev}",
        ]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: always

  redis:
    image: redis:7
    container_name: hotel_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    env_file:
      - .env

  app1:
    image: mohamedsheriif/hotel-booking-api:latest
    container_name: hotel_app1
    expose:
      - "3000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always

  app2:
    image: mohamedsheriif/hotel-booking-api:latest
    container_name: hotel_app2
    expose:
      - "3000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always

  app3:
    image: mohamedsheriif/hotel-booking-api:latest
    container_name: hotel_app3
    expose:
      - "3000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always

  nginx:
    image: nginx:1.25-alpine
    container_name: hotel_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app1
      - app2
      - app3
    restart: always

volumes:
  postgres_data:
  redis_data:
